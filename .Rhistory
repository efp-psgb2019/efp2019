install.packages("blogdown")
blogdown::new_site()
blogdown::install_theme("schmanat/hugo-highlights-theme")
blogdown::new_site(theme = "gcushen/hugo-academic")
blogdown::new_site(theme = "schmanat/hugo-highlights-theme")
blogdown::new_site(theme = "digitalcraftsman/hugo-agency-theme")
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
shiny::runApp('C:/My R environment/older/shiny-server/Morph2017')
library(devtools)
devtools::install_github("MomX/Momocs")
library(Momocs)
devtools::install_github("MomX/Momocs")
install.packages(c("backports", "BiocManager", "broom", "caret", "checkmate", "classInt", "clipr", "ClusterR", "cowplot", "curl", "data.table", "dbplyr", "dbscan", "ddalpha", "DescTools", "dimRed", "e1071", "FNN", "ggpubr", "git2r", "haven", "htmlTable", "httr", "jsonlite", "kableExtra", "kmed", "knitr", "labelled", "lava", "mapview", "markdown", "mclust", "OpenImageR", "openssl", "parallelDist", "pdfCluster", "pillar", "ppclust", "prabclus", "pracma", "processx", "ps", "psych", "quantreg", "questionr", "RcppEigen", "RcppParallel", "readr", "readxl", "recipes", "rio", "rlang", "rmarkdown", "rmdformats", "RStoolbox", "rstudioapi", "sf", "sfsmisc", "slam", "spData", "tibble", "tinytex", "tm", "units"))
install.packages(c("backports", "BiocManager", "broom", "caret", "checkmate", "classInt", "clipr", "ClusterR", "cowplot", "curl", "data.table", "dbplyr", "dbscan", "ddalpha", "DescTools", "dimRed", "e1071", "FNN", "ggpubr", "git2r", "haven", "htmlTable", "httr", "jsonlite", "kableExtra", "kmed", "knitr", "labelled", "lava", "mapview", "markdown", "mclust", "OpenImageR", "openssl", "parallelDist", "pdfCluster", "pillar", "ppclust", "prabclus", "pracma", "processx", "ps", "psych", "quantreg", "questionr", "RcppEigen", "RcppParallel", "readr", "readxl", "recipes", "rio", "rlang", "rmarkdown", "rmdformats", "RStoolbox", "rstudioapi", "sf", "sfsmisc", "slam", "spData", "tibble", "tinytex", "tm", "units"))
install.packages(c("backports", "BiocManager", "broom", "caret", "checkmate", "classInt", "clipr", "ClusterR", "cowplot", "curl", "data.table", "dbplyr", "dbscan", "ddalpha", "DescTools", "dimRed", "e1071", "FNN", "ggpubr", "git2r", "haven", "htmlTable", "httr", "jsonlite", "kableExtra", "kmed", "knitr", "labelled", "lava", "mapview", "markdown", "mclust", "OpenImageR", "openssl", "parallelDist", "pdfCluster", "pillar", "ppclust", "prabclus", "pracma", "processx", "ps", "psych", "quantreg", "questionr", "RcppEigen", "RcppParallel", "readr", "readxl", "recipes", "rio", "rlang", "rmarkdown", "rmdformats", "RStoolbox", "rstudioapi", "sf", "sfsmisc", "slam", "spData", "tibble", "tinytex", "tm", "units"))
devtools::install_github("MomX/Momocs")
library(Momocs)
shiny::runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
model.means
View(OF.pca)
plot(OF.pca)
plot(OF.lda)
plot(OF.lda, breaks = 10)
plot_LDA(OF.lda)
runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
col_summer()
col_summer
plot_LDA(OF.lda, palette = col_summer, points = T, morphospace = T)
plot_LDA(OF.lda, palette = col_summer, points = T)
plot_LDA(OF.lda, palette = col_summer, eigen = T)
runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
panel(OF, fac="aut", names="aut")
panel(OF)
panel(OF.aligned)
str(OF.m)
OF.aligned
panel(OF.aligned, cols = Sex)
panel(OF.aligned, fac = Sex)
panel(OF.aligned, fac = "Sex")
runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
panel(OF.aligned, cols = c("f8766d", "00bfc4"), fac = "Sex")
panel(OF.aligned, cols = c("#f8766d", "#00bfc4"), fac = "Sex")
svg()
panel(OF.aligned, cols = c("#f8766d", "#00bfc4"), fac = "Sex")
dev.off()
panel(OF.aligned, cols = c("#f8766d", "#00bfc4"), fac = "Sex", names = T)
panel(OF.aligned, cols = c("#f8766d", "#00bfc4"), fac = "Sex")
panel(OF.aligned, cols = c("#f8766d", "#00bfc4"), fac = "Sex", borders = F)
TF.f <- list()
for	(i in 1:length(rawLPF)){
TF.f[[i]] <- coo_interpolate(rawLPF[[i]]$points[[1]], n = 24)
names(TF.f)[[i]] <- rawLPF[[i]]$image
}
TF.m <- list()
for	(i in 1:length(rawLPM)){
TF.m[[i]] <- coo_interpolate(rawLPM[[i]]$points[[1]], n = 24)
names(TF.m)[[i]] <- rawLPM[[i]]$image
}
Sex <- rep("Female", length(TF.f))
#TF.f$scale <- data.frame(rawLPF$scale)
TF.f <- Out(TF.f, fac = as.data.frame(Sex))
Sex <- rep("Male", length(TF.m))
#TF.m$scale <- data.frame(rawLPM$scale)
TF.m <- Out(TF.m, fac = as.data.frame(Sex))
TF <- combine(TF.f, TF.m)
TF <- rescale(TF, 0.113) # scaling factor, measured in TPSdig2
TF.aligned <- TF %>% coo_rotate(., theta = pi) %>% fgProcrustes() %>% coo_close()
TF.ef <- efourier(TF.aligned, nb.h = 6)
TF.pca <- PCA(TF.ef, fac = "Sex")
TF.lda <- LDA(TF.pca$x[,c(2,4)], TF.pca$fac$Sex) # normally would just be LDA(TF.pca, 1)
TF.ef <- npoly(TF.aligned, degree = 8)
panel(TF.aligned, cols = c("#f8766d", "#00bfc4"), fac = "Sex")
panel(TF.aligned, borders = c("#f8766d", "#00bfc4"), fac = "Sex")
panel(TF.aligned, borders = c("#f8766d", "#00bfc4"), fac = "Sex", cols = F)
panel(TF, borders = c("#f8766d", "#00bfc4"), fac = "Sex", cols = F)
panel(TF.aligned, fac = "Sex", cols = F)
ftimes <- rep('red', length(grep('Female', TE.aligned$fac$Sex)))
mtimes <- rep('blue', length(grep('Male', TE.aligned$fac$Sex)))
panel(TE.aligned, borders = c(ftimes, mtimes), names = substr(names(TE.aligned), 7, 9))
ftimes <- rep("#f8766d", length(grep('Female', TF.aligned$fac$Sex)))
mtimes <- rep("#00bfc4", length(grep('Male', TF.aligned$fac$Sex)))
panel(TF.aligned, borders = c(ftimes, mtimes))
library(Momocs) # package for outline and curve analysis
set.seed(42)
source("R/new_import_tps.R")
rawLPF <- new_import_tps("LPF.tps") # read data Left, Posterior, Females
rawLPM <- new_import_tps("LPM.tps") # read data Left, Posterior, Males
TF.f <- list()
for	(i in 1:length(rawLPF)){
TF.f[[i]] <- coo_sample(rawLPF[[i]]$points[[1]], n = 16)
names(TF.f)[[i]] <- rawLPF[[i]]$image
}
TF.m <- list()
for	(i in 1:length(rawLPM)){
TF.m[[i]] <- coo_sample(rawLPM[[i]]$points[[1]], n = 16)
names(TF.m)[[i]] <- rawLPM[[i]]$image
}
Sex <- rep("Female", length(TF.f))
#TF.f$scale <- data.frame(rawLPF$scale)
TF.f <- Out(TF.f, fac = as.data.frame(Sex))
Sex <- rep("Male", length(TF.m))
#TF.m$scale <- data.frame(rawLPM$scale)
TF.m <- Out(TF.m, fac = as.data.frame(Sex))
TF <- combine(TF.f, TF.m)
TF <- rescale(TF, 0.113) # scaling factor, measured in TPSdig2
TF.aligned <- TF %>% coo_rotate(., theta = pi) %>% fgProcrustes() %>% Opn()
TF.ef <- npoly(TF.aligned)
TF.pca <- PCA(TF.ef, fac = "Sex")
# LDA / CVA analysis
TF.lda <- LDA(TF.pca$x[,c(2,4)], TF.pca$fac$Sex) # normally would just be LDA(TF.pca, 1)
# PC 2 or PC 4
model.means <- apply(TF.lda$mod$means, 2, mean)
ftimes <- rep("#f8766d", length(grep('Female', TF.aligned$fac$Sex)))
mtimes <- rep("#00bfc4", length(grep('Male', TF.aligned$fac$Sex)))
panel(TF.aligned, borders = c(ftimes, mtimes))
runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
library(Momocs) # package for outline and curve analysis
set.seed(42)
source("R/new_import_tps.R")
rawLPF <- new_import_tps("LPF.tps") # read data Left, Posterior, Females
rawLPM <- new_import_tps("LPM.tps") # read data Left, Posterior, Males
TE.f <- list()
for (i in seq_along(rawLPF$cur)){
TE.f[[i]] <- rawLPF$cur[[i]][[1]]
names(TE.f)[[i]] <- names(rawLPF$cur)[[i]]
}
TE.m <- list()
for (i in seq_along(rawLPM$cur)){
TE.m[[i]] <- rawLPM$cur[[i]][[1]]
names(TE.m)[[i]] <- names(rawLPM$cur)[[i]]
}
Sex <- rep("Female", length(TE.f))
TE.f <- Out(TE.f, fac = as.data.frame(Sex))
Sex <- rep("Male", length(TE.m))
TE.m <- Out(TE.m, fac = as.data.frame(Sex))
TE <- combine(TE.f, TE.m)
###
OF.f <- list()
for (i in seq_along(rawLPF$cur)){
OF.f[[i]] <- rawLPF$cur[[i]][[2]]
names(OF.f)[[i]] <- names(rawLPF$cur)[[i]]
}
OF.m <- list()
for (i in seq_along(rawLPM$cur)){
OF.m[[i]] <- rawLPM$cur[[i]][[2]]
names(OF.m)[[i]] <- names(rawLPM$cur)[[i]]
}
Sex <- rep("Female", length(OF.f))
OF.f <- Out(OF.f, fac = as.data.frame(Sex))
Sex <- rep("Male", length(OF.m))
OF.m <- Out(OF.m, fac = as.data.frame(Sex))
OF <- combine(OF.f, OF.m)
TE.aligned <- TE %>% coo_rotate(.,theta = pi) %>% fgProcrustes() %>% Opn()
OF.aligned <- OF %>% coo_rotate(.,theta = pi) %>% fgProcrustes() %>% coo_close()
TE.aligned %>% stack(., title = "Trochlear Extension (H. sapiens)", fac = "Sex")
library(Momocs) # package for outline and curve analysis
set.seed(42)
source("R/new_import_tps.R")
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
build_site(local = FALSE, method = c("html", "custom"),
run_hugo = TRUE)
library(blogdown)
build_site(local = FALSE, method = c("html", "custom"),
run_hugo = TRUE)
build_site(local = FALSE, method = c("custom"), run_hugo = TRUE)
build_site(local = FALSE, method = "custom", run_hugo = TRUE)
build_site(local = FALSE, method = "htm", run_hugo = TRUE)
build_site(local = FALSE, method = c("html"), run_hugo = TRUE)
build_site(local = TRUE, method = c("html"), run_hugo = TRUE)
blogdown:::serve_site()
devtools::install_github("pmkruyen/deployR")
library(devtools)
install.packages("devtools")
library(devtools)
library(ape)
library("devtools", lib.loc="~/R/win-library/3.5")
remove.packages("devtools", lib="~/R/win-library/3.5")
install.packages("devtools")
library("devtools", lib.loc="~/R/win-library/3.5")
install.packages("backports")
library("devtools", lib.loc="~/R/win-library/3.5")
remove.packages("devtools")
.rs.restartR()
install.packages("devtools")
remove.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(devtools)
devtools::install_github("pmkruyen/deployR")
system("/Users/peterkruyen/surfdrive/public-analytics/deploy",wait=T)
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
?serve_site
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
shiny::runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
IRIS
iris
train(iris)
train(y = iris)
train(y = iris$Species, x = iris$Sepal.Length)
train(y = iris$Species, x = iris[,1:4])
train(y = iris$Species, x = iris[,1:4], method="fda")
sessionInfo()
sudo sh -c 'echo "deb http://cran.rstudio.com/bin/linux/ubuntu xenial-cran35/" >> /etc/apt/sources.list'
installed.packages()
u <- installed.packages()
str(u)
str(u)[1,]
u$1
u[[1]]
u[1,]
u[,1]
installed.packages()[,1]
updateR()
install.packages(c("dplyr", "evaluate", "flexmix", "FNN", "forcats", "geometry", "ggsignif", "ggthemes", "haven", "Hmisc", "irlba", "labelled", "later", "lava", "lhs", "maptools", "modelr", "OpenImageR", "paletteer", "R.utils", "R6", "raster", "readxl", "rgdal", "rmdformats", "servr", "sf", "stars", "stringi", "stringr", "sys", "vegan", "xfun", "XML"))
install.packages(c("dplyr", "evaluate", "flexmix", "FNN", "forcats", "geometry", "ggsignif", "ggthemes", "haven", "Hmisc", "irlba", "labelled", "later", "lava", "lhs", "maptools", "modelr", "OpenImageR", "paletteer", "R.utils", "R6", "raster", "readxl", "rgdal", "rmdformats", "servr", "sf", "stars", "stringi", "stringr", "sys", "vegan", "xfun", "XML"))
shiny::runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
install.packages("later")
shiny::runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
install.packages("dplyr")
shiny::runApp('C:/My R environment/older/shiny-server/Ammer-Coelho')
?caret::train
shiny::runApp('C:/My R environment/older/shiny-server/CADOES')
install.packages("caret")
runApp('C:/My R environment/older/shiny-server/CADOES')
library(caret)
install.packages("stringi")
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
library(gbm)
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
runApp('C:/My R environment/older/shiny-server/CADOES')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(imager)
install.packages("imager")
#Find the lines along the boundary of a square
px <- px.square(30,80,80) %>% boundary
library(magrittr)
#Find the lines along the boundary of a square
px <- px.square(30,80,80) %>% boundary
library(imager)
library(magrittr)
#Find the lines along the boundary of a square
px <- px.square(30,80,80) %>% boundary
plot(px)
#Hough transform
hough_line(px, ntheta=200) %>% plot
df <- hough_line(px,ntheta=800,data.frame=TRUE)
#Plot lines with the highest score
plot(px)
with(subset(df,score > quantile(score,.9995)),nfline(theta,rho,col="red"))
plot(boats)
df <- hough_line(boats,ntheta=800,data=TRUE)
#Plot lines with the highest score
plot(px)
with(subset(df,score > quantile(score,.9995)),nfline(theta,rho,col="red"))
plot(boats)
with(subset(df,score > quantile(score,.9995)),nfline(theta,rho,col="red"))
df
str(df)
df <- hough_line(px,ntheta=800,data.frame=TRUE)
str(df)
max(df$theta)
max(df$theta)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
